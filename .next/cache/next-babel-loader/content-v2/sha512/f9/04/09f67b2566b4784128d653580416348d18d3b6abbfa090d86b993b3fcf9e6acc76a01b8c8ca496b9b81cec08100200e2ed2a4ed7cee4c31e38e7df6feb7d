{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/blackchalkindia/Learning/Practice/react-complete-guide-code/nextjs-meetup-app/pages/[meetupId]/index.js\",\n    _s = $RefreshSig$();\n\nimport { useRouter } from 'next/router';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\n\nfunction MeetupDetailsPage(props) {\n  _s();\n\n  var router = useRouter();\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: props.title,\n    image: props.image,\n    address: props.address,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MeetupDetailsPage, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = MeetupDetailsPage;\nexport var __N_SSG = true;\nexport default MeetupDetailsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetailsPage\");","map":{"version":3,"sources":["/home/blackchalkindia/Learning/Practice/react-complete-guide-code/nextjs-meetup-app/pages/[meetupId]/index.js"],"names":["useRouter","MeetupDetails","MeetupDetailsPage","props","router","title","image","address","description"],"mappings":";;;;;AACA,SAASA,SAAT,QAA0B,aAA1B;AAEA,OAAOC,aAAP,MAA0B,wCAA1B;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AAC9B,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,sBACI,QAAC,aAAD;AACI,IAAA,KAAK,EAAEG,KAAK,CAACE,KADjB;AAEI,IAAA,KAAK,EAAEF,KAAK,CAACG,KAFjB;AAGI,IAAA,OAAO,EAAEH,KAAK,CAACI,OAHnB;AAII,IAAA,WAAW,EAAGJ,KAAK,CAACK;AAJxB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAVQN,iB;UACUF,S;;;KADVE,iB;;AA2CT,eAAeA,iBAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb'\nimport { useRouter } from 'next/router'\n\nimport MeetupDetails from '../../components/meetups/MeetupDetails'\n\nfunction MeetupDetailsPage(props) {\n    const router = useRouter()\n    return (\n        <MeetupDetails\n            title={props.title}\n            image={props.image}\n            address={props.address}\n            description= {props.description}\n        />\n    )\n}\n\nexport async function getStaticPaths(){\n    const client = await MongoClient.connect('mongodb://127.0.0.1:27017/meetup')\n    const db = client.db()\n    const meetupCollection = db.collection('meetups')\n    const meetups = await meetupCollection.find().toArray()\n    const paths = meetups.map(meetup => ( {\n        params: {\n            meetupId: meetup._id.toString()\n        }\n    } ))\n    return {\n        fallback: false,\n        paths\n    }\n}\n\nexport async function getStaticProps(context){\n    const _id = context.params.meetupId\n    const client = await MongoClient.connect('mongodb://127.0.0.1:27017/meetup')\n    const db = client.db()\n    const meetupCollection = db.collection('meetups')\n    const meetup = await meetupCollection.findOne({_id: ObjectId(_id)})\n    delete meetup._id;\n    client.close()\n    return {\n        props: {\n            ...meetup\n        }\n    }\n}\n\nexport default MeetupDetailsPage"]},"metadata":{},"sourceType":"module"}